"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var express = require("express");
var server_1 = require("./server");
var proxy_protocol_1 = require("./proxy-protocol");
var events = require("events");
var getRawBody = require("raw-body");
var middleware_1 = require("./middleware");
var Response = /** @class */ (function () {
    function Response() {
        this.headers = {};
    }
    Response.prototype.setStatusCode = function (statusCode) {
        this.statusCode = statusCode;
    };
    Response.prototype.setHeader = function (key, value) {
        this.headers[key] = value;
    };
    Response.prototype.send = function (body) {
        this.body = body;
    };
    return Response;
}());
var makeRequest = function () {
    var ee = new events.EventEmitter();
    ee.path = '/foo';
    ee.method = 'post';
    ee.queries = { foo: 'bar' };
    ee.headers = {
        foo: 'bar'
    };
    return ee;
};
var send = function (request, data) {
    process.nextTick(function () {
        request.emit('data', Buffer.from('bar'));
        request.emit('end');
    });
};
describe('base sever', function () {
    it('should get status without error', function (done) {
        var s = new server_1.Server(express(), function () {
            chai_1.expect(s.isListening).to.be.true;
            done();
        });
        chai_1.expect(s.socketPathSuffix).to.not.empty;
        chai_1.expect(s.isListening).to.be.false;
        s.startServer();
    });
});
describe('http trigger sever', function () {
    var fcHttpTriggerFunction = function (app) {
        var server = new server_1.Server(app);
        return {
            handler: function (req, res, ctx) {
                server.httpProxy(req, res, ctx);
            }
        };
    };
    it('should pass without error', function (done) {
        var _this = this;
        var app = express();
        var request = makeRequest();
        var response = new Response();
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, getRawBody(req)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).toString()]).equal('bar');
                        chai_1.expect(req.headers.foo).equal('bar');
                        chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.not.empty;
                        chai_1.expect(req.query).deep.equal(request.headers);
                        res.setHeader('foo', 'bar');
                        res.send('bar');
                        return [2 /*return*/];
                }
            });
        }); });
        response.send = function (data) {
            chai_1.expect(response.headers.foo).equal('bar');
            chai_1.expect(data.toString()).equal('bar');
            done();
        };
        fcHttpTriggerFunction(app).handler(request, response, {});
        send(request, 'bar');
    });
    it('should use middleware with default options', function (done) {
        var _this = this;
        var app = express();
        var request = makeRequest();
        var response = new Response();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext());
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.eventContext.event).to.be.undefined;
                chai_1.expect(req.eventContext.context).deep.equal(context);
                chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.be.undefined;
                done();
                return [2 /*return*/];
            });
        }); });
        fcHttpTriggerFunction(app).handler(request, response, context);
        send(request, 'bar');
    });
    it('should use middleware with reqPropKey is foo', function (done) {
        var _this = this;
        var app = express();
        var request = makeRequest();
        var response = new Response();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext({ reqPropKey: 'foo' }));
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.foo.context).deep.equal(context);
                done();
                return [2 /*return*/];
            });
        }); });
        fcHttpTriggerFunction(app).handler(request, response, context);
        send(request, 'bar');
    });
    it('should use middleware with deleteHeaders is false', function (done) {
        var _this = this;
        var app = express();
        var request = makeRequest();
        var response = new Response();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext({ deleteHeaders: false }));
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.be.not.undefined;
                done();
                return [2 /*return*/];
            });
        }); });
        fcHttpTriggerFunction(app).handler(request, response, context);
        send(request, 'bar');
    });
    it('should get body with req.body', function (done) {
        var _this = this;
        var app = express();
        var request = makeRequest();
        var response = new Response();
        var context = { foo: 'bar' };
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, getRawBody(req)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).toString()]).equal('bar');
                        done();
                        return [2 /*return*/];
                }
            });
        }); });
        request.body = 'bar';
        fcHttpTriggerFunction(app).handler(request, response, context);
    });
});
describe('api gateway sever', function () {
    var fcApiGatewayFunction = function (app) {
        var server = new server_1.Server(app);
        return {
            handler: function (e, ctx, callback) {
                server.proxy(e, ctx, callback);
            }
        };
    };
    var event = {
        'path': '/foo',
        'httpMethod': 'post',
        'headers': { foo: 'bar' },
        'queryParameters': { foo: 'bar' },
        'pathParameters': {},
        'body': 'bar',
        'isBase64Encoded': false
    };
    it('should pass without error', function (done) {
        var _this = this;
        var app = express();
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, getRawBody(req)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).toString()]).equal('bar');
                        chai_1.expect(req.headers.foo).equal('bar');
                        chai_1.expect(req.headers[proxy_protocol_1.EVENT_HEADER_NAME]).to.not.undefined;
                        chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.not.undefined;
                        chai_1.expect(req.query).deep.equal(event.headers);
                        res.setHeader('foo', 'bar');
                        res.send('bar');
                        return [2 /*return*/];
                }
            });
        }); });
        fcApiGatewayFunction(app).handler(JSON.stringify(event), {}, function (err, data) {
            chai_1.expect(data.headers.foo).equal('bar');
            chai_1.expect(data.body).equal('bar');
            done();
        });
    });
    it('should returns 404', function (done) {
        var app = express();
        fcApiGatewayFunction(app).handler(JSON.stringify(__assign({}, event, { path: '/not-found' })), {}, function (err, data) {
            chai_1.expect(data.statusCode).equal(404);
            done();
        });
    });
    it('should pass with Base64Encoded', function (done) {
        var _this = this;
        var app = express();
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, getRawBody(req)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).toString()]).equal('bar');
                        done();
                        return [2 /*return*/];
                }
            });
        }); });
        fcApiGatewayFunction(app).handler(JSON.stringify(__assign({}, event, { isBase64Encoded: true, body: Buffer.from('bar').toString('base64') })), {}, function (err, data) {
        });
    });
    it('should use middleware with default options', function (done) {
        var _this = this;
        var app = express();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext());
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.eventContext.event.path).equal('/foo');
                chai_1.expect(req.eventContext.context).deep.equal(context);
                chai_1.expect(req.headers[proxy_protocol_1.EVENT_HEADER_NAME]).to.be.undefined;
                chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.be.undefined;
                done();
                return [2 /*return*/];
            });
        }); });
        fcApiGatewayFunction(app).handler(JSON.stringify(event), context, function (err, data) {
        });
    });
    it('should use middleware with reqPropKey is foo', function (done) {
        var _this = this;
        var app = express();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext({ reqPropKey: 'foo' }));
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.foo.event.path).equal('/foo');
                chai_1.expect(req.foo.context).deep.equal(context);
                done();
                return [2 /*return*/];
            });
        }); });
        fcApiGatewayFunction(app).handler(JSON.stringify(event), context, function (err, data) {
        });
    });
    it('should use middleware with deleteHeaders is false', function (done) {
        var _this = this;
        var app = express();
        var context = { foo: 'bar' };
        app.use(middleware_1.eventContext({ deleteHeaders: false }));
        app.post('/foo', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(req.headers[proxy_protocol_1.EVENT_HEADER_NAME]).to.be.not.undefined;
                chai_1.expect(req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME]).to.be.not.undefined;
                done();
                return [2 /*return*/];
            });
        }); });
        fcApiGatewayFunction(app).handler(JSON.stringify(event), context, function (err, data) {
        });
    });
});
//# sourceMappingURL=server.spec.js.map