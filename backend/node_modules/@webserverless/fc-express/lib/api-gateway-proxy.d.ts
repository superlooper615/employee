/// <reference types="node" />
import { ApiGatewayContext, Resolver } from './proxy-protocol';
import * as http from 'http';
import { AbstractProxy } from './abstract-proxy';
export declare class ApiGatewayProxy extends AbstractProxy<ApiGatewayContext> {
    protected getResponseHeaders(response: http.IncomingMessage): http.IncomingHttpHeaders;
    protected pipeBody(ctx: ApiGatewayContext, req: http.ClientRequest): void;
    protected getBody(ctx: ApiGatewayContext): Buffer | undefined;
    protected getRequestHeaders(ctx: ApiGatewayContext): any;
    protected getHttpMethod(ctx: ApiGatewayContext): string;
    protected getPath(ctx: ApiGatewayContext): string;
    protected makeResolver(ctx: ApiGatewayContext): Resolver;
}
//# sourceMappingURL=api-gateway-proxy.d.ts.map