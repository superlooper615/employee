"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var abstract_proxy_1 = require("./abstract-proxy");
var getRawBody = require("raw-body");
var HttpTriggerProxy = /** @class */ (function (_super) {
    __extends(HttpTriggerProxy, _super);
    function HttpTriggerProxy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HttpTriggerProxy.prototype.pipeBody = function (ctx, req) {
        if (ctx.request.body) {
            req.write(ctx.request.body);
            req.end();
        }
        else {
            getRawBody(ctx.request, function (err, body) {
                req.write(body);
                req.end();
            });
        }
    };
    HttpTriggerProxy.prototype.getRequestHeaders = function (ctx) {
        var request = ctx.request;
        var headers = Object.assign({}, request.headers);
        return headers;
    };
    HttpTriggerProxy.prototype.getHttpMethod = function (ctx) {
        return ctx.request.method;
    };
    HttpTriggerProxy.prototype.getPath = function (ctx) {
        var request = ctx.request;
        return url.format({ pathname: request.path, query: request.queries });
    };
    HttpTriggerProxy.prototype.makeResolver = function (ctx) {
        return function (data) {
            var response = ctx.response;
            response.setStatusCode(data.statusCode);
            for (var key in data.headers) {
                if (data.headers.hasOwnProperty(key)) {
                    var value = data.headers[key];
                    response.setHeader(key, value);
                }
            }
            response.send(data.body);
        };
    };
    return HttpTriggerProxy;
}(abstract_proxy_1.AbstractProxy));
exports.HttpTriggerProxy = HttpTriggerProxy;
//# sourceMappingURL=http-trigger-proxy.js.map