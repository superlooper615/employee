"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var proxy_protocol_1 = require("./proxy-protocol");
function eventContext(options) {
    return function (req, res, next) {
        var defaultOptions = { reqPropKey: 'eventContext', deleteHeaders: true };
        var _a = __assign({}, defaultOptions, options), reqPropKey = _a.reqPropKey, deleteHeaders = _a.deleteHeaders;
        var eventStr = req.headers[proxy_protocol_1.EVENT_HEADER_NAME];
        var contextStr = req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME];
        if (!contextStr) {
            console.error("Missing " + proxy_protocol_1.CONTEXT_HEADER_NAME + " header(s)");
            next();
            return;
        }
        req[reqPropKey] = {
            context: JSON.parse(decodeURIComponent(contextStr))
        };
        if (req.headers[proxy_protocol_1.EVENT_HEADER_NAME]) {
            req[reqPropKey].event = JSON.parse(decodeURIComponent(eventStr));
        }
        if (deleteHeaders) {
            delete req.headers[proxy_protocol_1.EVENT_HEADER_NAME];
            delete req.headers[proxy_protocol_1.CONTEXT_HEADER_NAME];
        }
        next();
    };
}
exports.eventContext = eventContext;
//# sourceMappingURL=middleware.js.map