/// <reference types="node" />
import * as http from 'http';
import { Callback } from './proxy-protocol';
import { ApiGatewayProxy } from './api-gateway-proxy';
import { HttpTriggerProxy } from './http-trigger-proxy';
export declare class Server {
    socketPathSuffix: string;
    binaryTypes: string[];
    isListening: boolean;
    rawServer: http.Server;
    apiGatewayProxy: ApiGatewayProxy;
    httpTriggerProxy: HttpTriggerProxy;
    constructor(requestListener: (request: http.IncomingMessage, response: http.ServerResponse) => void, serverListenCallback?: () => void, binaryTypes?: string[]);
    proxy(event: any, context: any, callback: Callback): void;
    httpProxy(request: any, response: any, context: any): void;
    startServer(): http.Server;
    protected getRandomString(): string;
    getSocketPath(): any;
}
//# sourceMappingURL=server.d.ts.map