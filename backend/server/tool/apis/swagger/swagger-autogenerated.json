{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "boatHasManyboatrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "boatHasManyboatstatusschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "boat",
      "description": "Everything about your boat"
    },
    {
      "name": "boatrentalBelongsToboat",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatrentalBelongsToboatrentalstatus",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatrentalBelongsTocustomer",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatrentalBelongsToemployee",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatrental",
      "description": "Everything about your boatrental"
    },
    {
      "name": "boatrentalstatusHasManyboatrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "boatrentalstatus",
      "description": "Everything about your boatrentalstatus"
    },
    {
      "name": "boatstatusHasManyboatstatusschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "boatstatus",
      "description": "Everything about your boatstatus"
    },
    {
      "name": "boatstatusscheduleBelongsToboat",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatstatusscheduleBelongsToboatstatus",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatstatusscheduleBelongsToschedule",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "boatstatusschedule",
      "description": "Everything about your boatstatusschedule"
    },
    {
      "name": "customerHasManyboatrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "customer",
      "description": "Everything about your customer"
    },
    {
      "name": "customers",
      "description": "Everything about your customers"
    },
    {
      "name": "employeeBelongsToemployeestatus",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "employeeBelongsToemployeetype",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "employeeHasManyboatrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "employeeHasManyemployeeschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "employeeHasManyuseraccount",
      "description": "Everything about has many relation"
    },
    {
      "name": "employeeHasManyvacation",
      "description": "Everything about has many relation"
    },
    {
      "name": "employee",
      "description": "Everything about your employee"
    },
    {
      "name": "employeescheduleBelongsToemployee",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "employeescheduleBelongsToschedule",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "employeeschedule",
      "description": "Everything about your employeeschedule"
    },
    {
      "name": "employeestatusHasManyemployee",
      "description": "Everything about has many relation"
    },
    {
      "name": "employeestatus",
      "description": "Everything about your employeestatus"
    },
    {
      "name": "employeetypeHasManyemployee",
      "description": "Everything about has many relation"
    },
    {
      "name": "employeetype",
      "description": "Everything about your employeetype"
    },
    {
      "name": "scheduleBelongsToshift",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "scheduleHasManyboatstatusschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "scheduleHasManyemployeeschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "schedule",
      "description": "Everything about your schedule"
    },
    {
      "name": "shiftHasManyschedule",
      "description": "Everything about has many relation"
    },
    {
      "name": "shift",
      "description": "Everything about your shift"
    },
    {
      "name": "useraccountBelongsToemployee",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "useraccount",
      "description": "Everything about your useraccount"
    },
    {
      "name": "vacationBelongsToemployee",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "vacationBelongsTovacationstatus",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "vacationBelongsTovacationtype",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "vacation",
      "description": "Everything about your vacation"
    },
    {
      "name": "vacationstatusHasManyvacation",
      "description": "Everything about has many relation"
    },
    {
      "name": "vacationstatus",
      "description": "Everything about your vacationstatus"
    },
    {
      "name": "vacationtypeHasManyvacation",
      "description": "Everything about has many relation"
    },
    {
      "name": "vacationtype",
      "description": "Everything about your vacationtype"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/boat/has/boatrental": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Get boat list with boatrental children",
        "description": "",
        "operationId": "boatHasManyboatrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatrental": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Find boatrental list by parent boat id",
        "description": "Returns a single boat",
        "operationId": "getboatrentalByboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boat not found"
          }
        }
      },
      "post": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Insert boatrental under a parent boat",
        "description": "Returns a single boat",
        "operationId": "insertboatrentalByboatId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatrental/{boatrentalId}": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Get by boatrental id parent boat id",
        "description": "Returns a single boat",
        "operationId": "getboatrentalByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Delete by boatrental id parent boat id",
        "description": "Returns a single boat",
        "operationId": "deleteboatrentalByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of cboatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Update boatrental under a parent boat",
        "description": "Returns a single boat",
        "operationId": "updateboatrentalByIdAndboatId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatrental/{boatrentalId}/exists": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Check row exists by boatrental id and parent boat id",
        "description": "",
        "operationId": "existsboatrentalByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatrental/findOne": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Find one boatrental by parent boat id and filters",
        "description": "",
        "operationId": "findOneboatrentalByboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatrental/count": {
      "get": {
        "tags": [
          "boatHasManyboatrental"
        ],
        "summary": "Get boatrental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/has/boatstatusschedule": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Get boat list with boatstatusschedule children",
        "description": "",
        "operationId": "boatHasManyboatstatusscheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatstatusschedule": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Find boatstatusschedule list by parent boat id",
        "description": "Returns a single boat",
        "operationId": "getboatstatusscheduleByboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boat not found"
          }
        }
      },
      "post": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Insert boatstatusschedule under a parent boat",
        "description": "Returns a single boat",
        "operationId": "insertboatstatusscheduleByboatId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatstatusschedule/{boatstatusscheduleId}": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Get by boatstatusschedule id parent boat id",
        "description": "Returns a single boat",
        "operationId": "getboatstatusscheduleByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Delete by boatstatusschedule id parent boat id",
        "description": "Returns a single boat",
        "operationId": "deleteboatstatusscheduleByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of cboatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Update boatstatusschedule under a parent boat",
        "description": "Returns a single boat",
        "operationId": "updateboatstatusscheduleByIdAndboatId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatstatusschedule/{boatstatusscheduleId}/exists": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Check row exists by boatstatusschedule id and parent boat id",
        "description": "",
        "operationId": "existsboatstatusscheduleByIdAndboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatstatusschedule/findOne": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Find one boatstatusschedule by parent boat id and filters",
        "description": "",
        "operationId": "findOneboatstatusscheduleByboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/boatstatusschedule/count": {
      "get": {
        "tags": [
          "boatHasManyboatstatusschedule"
        ],
        "summary": "Get boatstatusschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinboatId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of parent boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boat": {
      "post": {
        "tags": [
          "boat"
        ],
        "summary": "Add a new boat",
        "description": "",
        "operationId": "addboat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boat object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boat"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getboat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/{boatId}": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Find boat by ID",
        "description": "Returns a single boat",
        "operationId": "getboatById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boat"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boat not found"
          }
        }
      },
      "put": {
        "tags": [
          "boat"
        ],
        "summary": "Updates a boat",
        "description": "",
        "operationId": "updateboat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "boat object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boat"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boat"
        ],
        "summary": "Deletes a boat",
        "description": "",
        "operationId": "deleteboat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boat not found"
          }
        }
      }
    },
    "/api/v1/boat/bulk": {
      "post": {
        "tags": [
          "boat"
        ],
        "summary": "Bulk boat insert",
        "description": "",
        "operationId": "bulkboatInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boat objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boat"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "boat"
        ],
        "summary": "Updates a boat",
        "description": "",
        "operationId": "updateboat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boat objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boat"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boat"
        ],
        "summary": "Deletes a boat",
        "description": "",
        "operationId": "deleteboat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boat objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boat"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boat not found"
          }
        }
      }
    },
    "/api/v1/boat/findOne": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneboat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boat"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/{boatId}/exists": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Check boat with provided ID exists",
        "description": "Returns a single boat",
        "operationId": "checkboatExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatId",
            "in": "path",
            "description": "ID of boat",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boat/count": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Get boat count",
        "operationId": "getboatCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/groupby/{columnName}": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "boatGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boat"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/distribution/{columnName}": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "",
        "description": "",
        "operationId": "boatDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/distinct/{columnName}": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boat/aggregate/{columnName}": {
      "get": {
        "tags": [
          "boat"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boat"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/belongs/boat": {
      "get": {
        "tags": [
          "boatrentalBelongsToboat"
        ],
        "summary": "Get boatrental list with boat parent",
        "description": "",
        "operationId": "boatrentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatrental/belongs/boatrentalstatus": {
      "get": {
        "tags": [
          "boatrentalBelongsToboatrentalstatus"
        ],
        "summary": "Get boatrental list with boatrentalstatus parent",
        "description": "",
        "operationId": "boatrentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatrental/belongs/customer": {
      "get": {
        "tags": [
          "boatrentalBelongsTocustomer"
        ],
        "summary": "Get boatrental list with customer parent",
        "description": "",
        "operationId": "boatrentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatrental/belongs/employee": {
      "get": {
        "tags": [
          "boatrentalBelongsToemployee"
        ],
        "summary": "Get boatrental list with employee parent",
        "description": "",
        "operationId": "boatrentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatrental": {
      "post": {
        "tags": [
          "boatrental"
        ],
        "summary": "Add a new boatrental",
        "description": "",
        "operationId": "addboatrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getboatrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/{boatrentalId}": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Find boatrental by ID",
        "description": "Returns a single boatrental",
        "operationId": "getboatrentalById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrental not found"
          }
        }
      },
      "put": {
        "tags": [
          "boatrental"
        ],
        "summary": "Updates a boatrental",
        "description": "",
        "operationId": "updateboatrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatrental"
        ],
        "summary": "Deletes a boatrental",
        "description": "",
        "operationId": "deleteboatrental",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrental not found"
          }
        }
      }
    },
    "/api/v1/boatrental/bulk": {
      "post": {
        "tags": [
          "boatrental"
        ],
        "summary": "Bulk boatrental insert",
        "description": "",
        "operationId": "bulkboatrentalInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrental"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "boatrental"
        ],
        "summary": "Updates a boatrental",
        "description": "",
        "operationId": "updateboatrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrental"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatrental"
        ],
        "summary": "Deletes a boatrental",
        "description": "",
        "operationId": "deleteboatrental",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrental"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrental not found"
          }
        }
      }
    },
    "/api/v1/boatrental/findOne": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneboatrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/{boatrentalId}/exists": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Check boatrental with provided ID exists",
        "description": "Returns a single boatrental",
        "operationId": "checkboatrentalExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatrental/count": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Get boatrental count",
        "operationId": "getboatrentalCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/groupby/{columnName}": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "boatrentalGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/distribution/{columnName}": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "",
        "description": "",
        "operationId": "boatrentalDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/distinct/{columnName}": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatrentalDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrental/aggregate/{columnName}": {
      "get": {
        "tags": [
          "boatrental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatrentalAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/has/boatrental": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Get boatrentalstatus list with boatrental children",
        "description": "",
        "operationId": "boatrentalstatusHasManyboatrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/boatrental": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Find boatrental list by parent boatrentalstatus id",
        "description": "Returns a single boatrentalstatus",
        "operationId": "getboatrentalByboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrentalstatus not found"
          }
        }
      },
      "post": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Insert boatrental under a parent boatrentalstatus",
        "description": "Returns a single boatrentalstatus",
        "operationId": "insertboatrentalByboatrentalstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/boatrental/{boatrentalId}": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Get by boatrental id parent boatrentalstatus id",
        "description": "Returns a single boatrentalstatus",
        "operationId": "getboatrentalByIdAndboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of parent boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Delete by boatrental id parent boatrentalstatus id",
        "description": "Returns a single boatrentalstatus",
        "operationId": "deleteboatrentalByIdAndboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of parent boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of cboatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Update boatrental under a parent boatrentalstatus",
        "description": "Returns a single boatrentalstatus",
        "operationId": "updateboatrentalByIdAndboatrentalstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/boatrental/{boatrentalId}/exists": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Check row exists by boatrental id and parent boatrentalstatus id",
        "description": "",
        "operationId": "existsboatrentalByIdAndboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of parent boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/boatrental/findOne": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Find one boatrental by parent boatrentalstatus id and filters",
        "description": "",
        "operationId": "findOneboatrentalByboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of parent boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/boatrental/count": {
      "get": {
        "tags": [
          "boatrentalstatusHasManyboatrental"
        ],
        "summary": "Get boatrental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinboatrentalstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of parent boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus": {
      "post": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Add a new boatrentalstatus",
        "description": "",
        "operationId": "addboatrentalstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrentalstatus object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getboatrentalstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Find boatrentalstatus by ID",
        "description": "Returns a single boatrentalstatus",
        "operationId": "getboatrentalstatusById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrentalstatus not found"
          }
        }
      },
      "put": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Updates a boatrentalstatus",
        "description": "",
        "operationId": "updateboatrentalstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "boatrentalstatus object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Deletes a boatrentalstatus",
        "description": "",
        "operationId": "deleteboatrentalstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrentalstatus not found"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/bulk": {
      "post": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Bulk boatrentalstatus insert",
        "description": "",
        "operationId": "bulkboatrentalstatusInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrentalstatus objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrentalstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Updates a boatrentalstatus",
        "description": "",
        "operationId": "updateboatrentalstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrentalstatus objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrentalstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Deletes a boatrentalstatus",
        "description": "",
        "operationId": "deleteboatrentalstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrentalstatus objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatrentalstatus"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatrentalstatus not found"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/findOne": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneboatrentalstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/{boatrentalstatusId}/exists": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Check boatrentalstatus with provided ID exists",
        "description": "Returns a single boatrentalstatus",
        "operationId": "checkboatrentalstatusExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatrentalstatusId",
            "in": "path",
            "description": "ID of boatrentalstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/count": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Get boatrentalstatus count",
        "operationId": "getboatrentalstatusCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/groupby/{columnName}": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "boatrentalstatusGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/distribution/{columnName}": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "",
        "description": "",
        "operationId": "boatrentalstatusDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/distinct/{columnName}": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatrentalstatusDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatrentalstatus/aggregate/{columnName}": {
      "get": {
        "tags": [
          "boatrentalstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatrentalstatusAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatrentalstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/has/boatstatusschedule": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Get boatstatus list with boatstatusschedule children",
        "description": "",
        "operationId": "boatstatusHasManyboatstatusscheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/boatstatusschedule": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Find boatstatusschedule list by parent boatstatus id",
        "description": "Returns a single boatstatus",
        "operationId": "getboatstatusscheduleByboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatus not found"
          }
        }
      },
      "post": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Insert boatstatusschedule under a parent boatstatus",
        "description": "Returns a single boatstatus",
        "operationId": "insertboatstatusscheduleByboatstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/boatstatusschedule/{boatstatusscheduleId}": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Get by boatstatusschedule id parent boatstatus id",
        "description": "Returns a single boatstatus",
        "operationId": "getboatstatusscheduleByIdAndboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of parent boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Delete by boatstatusschedule id parent boatstatus id",
        "description": "Returns a single boatstatus",
        "operationId": "deleteboatstatusscheduleByIdAndboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of parent boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of cboatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Update boatstatusschedule under a parent boatstatus",
        "description": "Returns a single boatstatus",
        "operationId": "updateboatstatusscheduleByIdAndboatstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/boatstatusschedule/{boatstatusscheduleId}/exists": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Check row exists by boatstatusschedule id and parent boatstatus id",
        "description": "",
        "operationId": "existsboatstatusscheduleByIdAndboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of parent boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/boatstatusschedule/findOne": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Find one boatstatusschedule by parent boatstatus id and filters",
        "description": "",
        "operationId": "findOneboatstatusscheduleByboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of parent boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/boatstatusschedule/count": {
      "get": {
        "tags": [
          "boatstatusHasManyboatstatusschedule"
        ],
        "summary": "Get boatstatusschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinboatstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of parent boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus": {
      "post": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Add a new boatstatus",
        "description": "",
        "operationId": "addboatstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatus object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getboatstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Find boatstatus by ID",
        "description": "Returns a single boatstatus",
        "operationId": "getboatstatusById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatus not found"
          }
        }
      },
      "put": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Updates a boatstatus",
        "description": "",
        "operationId": "updateboatstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "boatstatus object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Deletes a boatstatus",
        "description": "",
        "operationId": "deleteboatstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatus not found"
          }
        }
      }
    },
    "/api/v1/boatstatus/bulk": {
      "post": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Bulk boatstatus insert",
        "description": "",
        "operationId": "bulkboatstatusInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatus objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Updates a boatstatus",
        "description": "",
        "operationId": "updateboatstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatus objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Deletes a boatstatus",
        "description": "",
        "operationId": "deleteboatstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatus objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatus"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatus not found"
          }
        }
      }
    },
    "/api/v1/boatstatus/findOne": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneboatstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/{boatstatusId}/exists": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Check boatstatus with provided ID exists",
        "description": "Returns a single boatstatus",
        "operationId": "checkboatstatusExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusId",
            "in": "path",
            "description": "ID of boatstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatstatus/count": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Get boatstatus count",
        "operationId": "getboatstatusCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/groupby/{columnName}": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "boatstatusGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/distribution/{columnName}": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "",
        "description": "",
        "operationId": "boatstatusDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/distinct/{columnName}": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatstatusDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatus/aggregate/{columnName}": {
      "get": {
        "tags": [
          "boatstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatstatusAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/belongs/boat": {
      "get": {
        "tags": [
          "boatstatusscheduleBelongsToboat"
        ],
        "summary": "Get boatstatusschedule list with boat parent",
        "description": "",
        "operationId": "boatstatusscheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/belongs/boatstatus": {
      "get": {
        "tags": [
          "boatstatusscheduleBelongsToboatstatus"
        ],
        "summary": "Get boatstatusschedule list with boatstatus parent",
        "description": "",
        "operationId": "boatstatusscheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/belongs/schedule": {
      "get": {
        "tags": [
          "boatstatusscheduleBelongsToschedule"
        ],
        "summary": "Get boatstatusschedule list with schedule parent",
        "description": "",
        "operationId": "boatstatusscheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/boatstatusschedule": {
      "post": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Add a new boatstatusschedule",
        "description": "",
        "operationId": "addboatstatusschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getboatstatusschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/{boatstatusscheduleId}": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Find boatstatusschedule by ID",
        "description": "Returns a single boatstatusschedule",
        "operationId": "getboatstatusscheduleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatusschedule not found"
          }
        }
      },
      "put": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Updates a boatstatusschedule",
        "description": "",
        "operationId": "updateboatstatusschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Deletes a boatstatusschedule",
        "description": "",
        "operationId": "deleteboatstatusschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatusschedule not found"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/bulk": {
      "post": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Bulk boatstatusschedule insert",
        "description": "",
        "operationId": "bulkboatstatusscheduleInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatusschedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Updates a boatstatusschedule",
        "description": "",
        "operationId": "updateboatstatusschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatusschedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Deletes a boatstatusschedule",
        "description": "",
        "operationId": "deleteboatstatusschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/boatstatusschedule"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "boatstatusschedule not found"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/findOne": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneboatstatusschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/{boatstatusscheduleId}/exists": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Check boatstatusschedule with provided ID exists",
        "description": "Returns a single boatstatusschedule",
        "operationId": "checkboatstatusscheduleExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/count": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Get boatstatusschedule count",
        "operationId": "getboatstatusscheduleCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/groupby/{columnName}": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "boatstatusscheduleGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/distribution/{columnName}": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "",
        "description": "",
        "operationId": "boatstatusscheduleDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/distinct/{columnName}": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatstatusscheduleDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/boatstatusschedule/aggregate/{columnName}": {
      "get": {
        "tags": [
          "boatstatusschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "boatstatusscheduleAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/boatstatusschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/has/boatrental": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Get customer list with boatrental children",
        "description": "",
        "operationId": "customerHasManyboatrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/boatrental": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Find boatrental list by parent customer id",
        "description": "Returns a single customer",
        "operationId": "getboatrentalBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      },
      "post": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Insert boatrental under a parent customer",
        "description": "Returns a single customer",
        "operationId": "insertboatrentalBycustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/boatrental/{boatrentalId}": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Get by boatrental id parent customer id",
        "description": "Returns a single customer",
        "operationId": "getboatrentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Delete by boatrental id parent customer id",
        "description": "Returns a single customer",
        "operationId": "deleteboatrentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of cboatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Update boatrental under a parent customer",
        "description": "Returns a single customer",
        "operationId": "updateboatrentalByIdAndcustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/boatrental/{boatrentalId}/exists": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Check row exists by boatrental id and parent customer id",
        "description": "",
        "operationId": "existsboatrentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/boatrental/findOne": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Find one boatrental by parent customer id and filters",
        "description": "",
        "operationId": "findOneboatrentalBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/boatrental/count": {
      "get": {
        "tags": [
          "customerHasManyboatrental"
        ],
        "summary": "Get boatrental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Add a new customer",
        "description": "",
        "operationId": "addcustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/{customerId}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find customer by ID",
        "description": "Returns a single customer",
        "operationId": "getcustomerById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer",
        "description": "",
        "operationId": "updatecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "customer object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "description": "",
        "operationId": "deletecustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      }
    },
    "/api/v1/customer/bulk": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Bulk customer insert",
        "description": "",
        "operationId": "bulkcustomerInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer",
        "description": "",
        "operationId": "updatecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "description": "",
        "operationId": "deletecustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      }
    },
    "/api/v1/customer/findOne": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/exists": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Check customer with provided ID exists",
        "description": "Returns a single customer",
        "operationId": "checkcustomerExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customer/count": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer count",
        "operationId": "getcustomerCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/groupby/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "customerGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/distribution/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "",
        "description": "",
        "operationId": "customerDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/distinct/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customerDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/aggregate/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customerAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Add a new customers",
        "description": "",
        "operationId": "addcustomers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customers object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customers"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcustomers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/{customersId}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Find customers by ID",
        "description": "Returns a single customers",
        "operationId": "getcustomersById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customersId",
            "in": "path",
            "description": "ID of customers to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customers not found"
          }
        }
      },
      "put": {
        "tags": [
          "customers"
        ],
        "summary": "Updates a customers",
        "description": "",
        "operationId": "updatecustomers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customersId",
            "in": "path",
            "description": "ID of customers to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "customers object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customers"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customers"
        ],
        "summary": "Deletes a customers",
        "description": "",
        "operationId": "deletecustomers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customersId",
            "in": "path",
            "description": "ID of customers to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customers not found"
          }
        }
      }
    },
    "/api/v1/customers/bulk": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Bulk customers insert",
        "description": "",
        "operationId": "bulkcustomersInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customers objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customers"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "customers"
        ],
        "summary": "Updates a customers",
        "description": "",
        "operationId": "updatecustomers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customers objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customers"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customers"
        ],
        "summary": "Deletes a customers",
        "description": "",
        "operationId": "deletecustomers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customers objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customers"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customers not found"
          }
        }
      }
    },
    "/api/v1/customers/findOne": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecustomers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/{customersId}/exists": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Check customers with provided ID exists",
        "description": "Returns a single customers",
        "operationId": "checkcustomersExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customersId",
            "in": "path",
            "description": "ID of customers",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customers/count": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get customers count",
        "operationId": "getcustomersCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/groupby/{columnName}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "customersGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/distribution/{columnName}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "",
        "description": "",
        "operationId": "customersDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/distinct/{columnName}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customersDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customers/aggregate/{columnName}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customersAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/belongs/employeestatus": {
      "get": {
        "tags": [
          "employeeBelongsToemployeestatus"
        ],
        "summary": "Get employee list with employeestatus parent",
        "description": "",
        "operationId": "employeeWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/belongs/employeetype": {
      "get": {
        "tags": [
          "employeeBelongsToemployeetype"
        ],
        "summary": "Get employee list with employeetype parent",
        "description": "",
        "operationId": "employeeWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/has/boatrental": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Get employee list with boatrental children",
        "description": "",
        "operationId": "employeeHasManyboatrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/boatrental": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Find boatrental list by parent employee id",
        "description": "Returns a single employee",
        "operationId": "getboatrentalByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Insert boatrental under a parent employee",
        "description": "Returns a single employee",
        "operationId": "insertboatrentalByemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/boatrental/{boatrentalId}": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Get by boatrental id parent employee id",
        "description": "Returns a single employee",
        "operationId": "getboatrentalByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Delete by boatrental id parent employee id",
        "description": "Returns a single employee",
        "operationId": "deleteboatrentalByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of cboatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Update boatrental under a parent employee",
        "description": "Returns a single employee",
        "operationId": "updateboatrentalByIdAndemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatrental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/boatrental/{boatrentalId}/exists": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Check row exists by boatrental id and parent employee id",
        "description": "",
        "operationId": "existsboatrentalByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatrentalId",
            "in": "path",
            "description": "ID of boatrental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/boatrental/findOne": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Find one boatrental by parent employee id and filters",
        "description": "",
        "operationId": "findOneboatrentalByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/boatrental/count": {
      "get": {
        "tags": [
          "employeeHasManyboatrental"
        ],
        "summary": "Get boatrental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/has/employeeschedule": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get employee list with employeeschedule children",
        "description": "",
        "operationId": "employeeHasManyemployeescheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Find employeeschedule list by parent employee id",
        "description": "Returns a single employee",
        "operationId": "getemployeescheduleByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Insert employeeschedule under a parent employee",
        "description": "Returns a single employee",
        "operationId": "insertemployeescheduleByemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/{employeescheduleId}": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get by employeeschedule id parent employee id",
        "description": "Returns a single employee",
        "operationId": "getemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Delete by employeeschedule id parent employee id",
        "description": "Returns a single employee",
        "operationId": "deleteemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of cemployeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Update employeeschedule under a parent employee",
        "description": "Returns a single employee",
        "operationId": "updateemployeescheduleByIdAndemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/{employeescheduleId}/exists": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Check row exists by employeeschedule id and parent employee id",
        "description": "",
        "operationId": "existsemployeescheduleByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/findOne": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Find one employeeschedule by parent employee id and filters",
        "description": "",
        "operationId": "findOneemployeescheduleByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/employeeschedule/count": {
      "get": {
        "tags": [
          "employeeHasManyemployeeschedule"
        ],
        "summary": "Get employeeschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/has/useraccount": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Get employee list with useraccount children",
        "description": "",
        "operationId": "employeeHasManyuseraccountList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/useraccount": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Find useraccount list by parent employee id",
        "description": "Returns a single employee",
        "operationId": "getuseraccountByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Insert useraccount under a parent employee",
        "description": "Returns a single employee",
        "operationId": "insertuseraccountByemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/useraccount/{useraccountId}": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Get by useraccount id parent employee id",
        "description": "Returns a single employee",
        "operationId": "getuseraccountByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Delete by useraccount id parent employee id",
        "description": "Returns a single employee",
        "operationId": "deleteuseraccountByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of cuseraccount",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Update useraccount under a parent employee",
        "description": "Returns a single employee",
        "operationId": "updateuseraccountByIdAndemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/useraccount/{useraccountId}/exists": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Check row exists by useraccount id and parent employee id",
        "description": "",
        "operationId": "existsuseraccountByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/useraccount/findOne": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Find one useraccount by parent employee id and filters",
        "description": "",
        "operationId": "findOneuseraccountByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/useraccount/count": {
      "get": {
        "tags": [
          "employeeHasManyuseraccount"
        ],
        "summary": "Get useraccount count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/has/vacation": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Get employee list with vacation children",
        "description": "",
        "operationId": "employeeHasManyvacationList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/vacation": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Find vacation list by parent employee id",
        "description": "Returns a single employee",
        "operationId": "getvacationByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Insert vacation under a parent employee",
        "description": "Returns a single employee",
        "operationId": "insertvacationByemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/vacation/{vacationId}": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Get by vacation id parent employee id",
        "description": "Returns a single employee",
        "operationId": "getvacationByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Delete by vacation id parent employee id",
        "description": "Returns a single employee",
        "operationId": "deletevacationByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of cvacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Update vacation under a parent employee",
        "description": "Returns a single employee",
        "operationId": "updatevacationByIdAndemployeeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/vacation/{vacationId}/exists": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Check row exists by vacation id and parent employee id",
        "description": "",
        "operationId": "existsvacationByIdAndemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/vacation/findOne": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Find one vacation by parent employee id and filters",
        "description": "",
        "operationId": "findOnevacationByemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/vacation/count": {
      "get": {
        "tags": [
          "employeeHasManyvacation"
        ],
        "summary": "Get vacation count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of parent employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employee": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Add a new employee",
        "description": "",
        "operationId": "addemployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getemployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Find employee by ID",
        "description": "Returns a single employee",
        "operationId": "getemployeeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Updates a employee",
        "description": "",
        "operationId": "updateemployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employee object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employee"
        ],
        "summary": "Deletes a employee",
        "description": "",
        "operationId": "deleteemployee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      }
    },
    "/api/v1/employee/bulk": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Bulk employee insert",
        "description": "",
        "operationId": "bulkemployeeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Updates a employee",
        "description": "",
        "operationId": "updateemployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employee"
        ],
        "summary": "Deletes a employee",
        "description": "",
        "operationId": "deleteemployee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employee"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        }
      }
    },
    "/api/v1/employee/findOne": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneemployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/{employeeId}/exists": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Check employee with provided ID exists",
        "description": "Returns a single employee",
        "operationId": "checkemployeeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employee/count": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get employee count",
        "operationId": "getemployeeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/groupby/{columnName}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "employeeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/distribution/{columnName}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "",
        "description": "",
        "operationId": "employeeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/distinct/{columnName}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employee/aggregate/{columnName}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/belongs/employee": {
      "get": {
        "tags": [
          "employeescheduleBelongsToemployee"
        ],
        "summary": "Get employeeschedule list with employee parent",
        "description": "",
        "operationId": "employeescheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employeeschedule/belongs/schedule": {
      "get": {
        "tags": [
          "employeescheduleBelongsToschedule"
        ],
        "summary": "Get employeeschedule list with schedule parent",
        "description": "",
        "operationId": "employeescheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employeeschedule": {
      "post": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Add a new employeeschedule",
        "description": "",
        "operationId": "addemployeeschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getemployeeschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/{employeescheduleId}": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Find employeeschedule by ID",
        "description": "Returns a single employeeschedule",
        "operationId": "getemployeescheduleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeeschedule not found"
          }
        }
      },
      "put": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Updates a employeeschedule",
        "description": "",
        "operationId": "updateemployeeschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Deletes a employeeschedule",
        "description": "",
        "operationId": "deleteemployeeschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeeschedule not found"
          }
        }
      }
    },
    "/api/v1/employeeschedule/bulk": {
      "post": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Bulk employeeschedule insert",
        "description": "",
        "operationId": "bulkemployeescheduleInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeeschedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Updates a employeeschedule",
        "description": "",
        "operationId": "updateemployeeschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeeschedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Deletes a employeeschedule",
        "description": "",
        "operationId": "deleteemployeeschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeeschedule"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeeschedule not found"
          }
        }
      }
    },
    "/api/v1/employeeschedule/findOne": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneemployeeschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/{employeescheduleId}/exists": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Check employeeschedule with provided ID exists",
        "description": "Returns a single employeeschedule",
        "operationId": "checkemployeescheduleExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employeeschedule/count": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Get employeeschedule count",
        "operationId": "getemployeescheduleCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/groupby/{columnName}": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "employeescheduleGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/distribution/{columnName}": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "",
        "description": "",
        "operationId": "employeescheduleDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/distinct/{columnName}": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeescheduleDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeeschedule/aggregate/{columnName}": {
      "get": {
        "tags": [
          "employeeschedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeescheduleAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeeschedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/has/employee": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Get employeestatus list with employee children",
        "description": "",
        "operationId": "employeestatusHasManyemployeeList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/employee": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Find employee list by parent employeestatus id",
        "description": "Returns a single employeestatus",
        "operationId": "getemployeeByemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeestatus not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Insert employee under a parent employeestatus",
        "description": "Returns a single employeestatus",
        "operationId": "insertemployeeByemployeestatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/employee/{employeeId}": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Get by employee id parent employeestatus id",
        "description": "Returns a single employeestatus",
        "operationId": "getemployeeByIdAndemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of parent employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Delete by employee id parent employeestatus id",
        "description": "Returns a single employeestatus",
        "operationId": "deleteemployeeByIdAndemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of parent employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of cemployee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Update employee under a parent employeestatus",
        "description": "Returns a single employeestatus",
        "operationId": "updateemployeeByIdAndemployeestatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/employee/{employeeId}/exists": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Check row exists by employee id and parent employeestatus id",
        "description": "",
        "operationId": "existsemployeeByIdAndemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of parent employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/employee/findOne": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Find one employee by parent employeestatus id and filters",
        "description": "",
        "operationId": "findOneemployeeByemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of parent employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/employee/count": {
      "get": {
        "tags": [
          "employeestatusHasManyemployee"
        ],
        "summary": "Get employee count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeestatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of parent employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus": {
      "post": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Add a new employeestatus",
        "description": "",
        "operationId": "addemployeestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeestatus object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getemployeestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Find employeestatus by ID",
        "description": "Returns a single employeestatus",
        "operationId": "getemployeestatusById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeestatus not found"
          }
        }
      },
      "put": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Updates a employeestatus",
        "description": "",
        "operationId": "updateemployeestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employeestatus object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Deletes a employeestatus",
        "description": "",
        "operationId": "deleteemployeestatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeestatus not found"
          }
        }
      }
    },
    "/api/v1/employeestatus/bulk": {
      "post": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Bulk employeestatus insert",
        "description": "",
        "operationId": "bulkemployeestatusInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeestatus objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeestatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Updates a employeestatus",
        "description": "",
        "operationId": "updateemployeestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeestatus objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeestatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Deletes a employeestatus",
        "description": "",
        "operationId": "deleteemployeestatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeestatus objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeestatus"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeestatus not found"
          }
        }
      }
    },
    "/api/v1/employeestatus/findOne": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneemployeestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/{employeestatusId}/exists": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Check employeestatus with provided ID exists",
        "description": "Returns a single employeestatus",
        "operationId": "checkemployeestatusExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeestatusId",
            "in": "path",
            "description": "ID of employeestatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employeestatus/count": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Get employeestatus count",
        "operationId": "getemployeestatusCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/groupby/{columnName}": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "employeestatusGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/distribution/{columnName}": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "",
        "description": "",
        "operationId": "employeestatusDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/distinct/{columnName}": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeestatusDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeestatus/aggregate/{columnName}": {
      "get": {
        "tags": [
          "employeestatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeestatusAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeestatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/has/employee": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Get employeetype list with employee children",
        "description": "",
        "operationId": "employeetypeHasManyemployeeList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/employee": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Find employee list by parent employeetype id",
        "description": "Returns a single employeetype",
        "operationId": "getemployeeByemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeetype not found"
          }
        }
      },
      "post": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Insert employee under a parent employeetype",
        "description": "Returns a single employeetype",
        "operationId": "insertemployeeByemployeetypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/employee/{employeeId}": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Get by employee id parent employeetype id",
        "description": "Returns a single employeetype",
        "operationId": "getemployeeByIdAndemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of parent employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Delete by employee id parent employeetype id",
        "description": "Returns a single employeetype",
        "operationId": "deleteemployeeByIdAndemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of parent employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of cemployee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Update employee under a parent employeetype",
        "description": "Returns a single employeetype",
        "operationId": "updateemployeeByIdAndemployeetypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/employee/{employeeId}/exists": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Check row exists by employee id and parent employeetype id",
        "description": "",
        "operationId": "existsemployeeByIdAndemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of parent employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/employee/findOne": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Find one employee by parent employeetype id and filters",
        "description": "",
        "operationId": "findOneemployeeByemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of parent employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/employee/count": {
      "get": {
        "tags": [
          "employeetypeHasManyemployee"
        ],
        "summary": "Get employee count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinemployeetypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of parent employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/employeetype": {
      "post": {
        "tags": [
          "employeetype"
        ],
        "summary": "Add a new employeetype",
        "description": "",
        "operationId": "addemployeetype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeetype object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getemployeetype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Find employeetype by ID",
        "description": "Returns a single employeetype",
        "operationId": "getemployeetypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeetype not found"
          }
        }
      },
      "put": {
        "tags": [
          "employeetype"
        ],
        "summary": "Updates a employeetype",
        "description": "",
        "operationId": "updateemployeetype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employeetype object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeetype"
        ],
        "summary": "Deletes a employeetype",
        "description": "",
        "operationId": "deleteemployeetype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeetype not found"
          }
        }
      }
    },
    "/api/v1/employeetype/bulk": {
      "post": {
        "tags": [
          "employeetype"
        ],
        "summary": "Bulk employeetype insert",
        "description": "",
        "operationId": "bulkemployeetypeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeetype objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeetype"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "employeetype"
        ],
        "summary": "Updates a employeetype",
        "description": "",
        "operationId": "updateemployeetype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeetype objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeetype"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employeetype"
        ],
        "summary": "Deletes a employeetype",
        "description": "",
        "operationId": "deleteemployeetype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeetype objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeetype"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employeetype not found"
          }
        }
      }
    },
    "/api/v1/employeetype/findOne": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneemployeetype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/{employeetypeId}/exists": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Check employeetype with provided ID exists",
        "description": "Returns a single employeetype",
        "operationId": "checkemployeetypeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeetypeId",
            "in": "path",
            "description": "ID of employeetype",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/employeetype/count": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Get employeetype count",
        "operationId": "getemployeetypeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/groupby/{columnName}": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "employeetypeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/distribution/{columnName}": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "",
        "description": "",
        "operationId": "employeetypeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/distinct/{columnName}": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeetypeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/employeetype/aggregate/{columnName}": {
      "get": {
        "tags": [
          "employeetype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "employeetypeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeetype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/belongs/shift": {
      "get": {
        "tags": [
          "scheduleBelongsToshift"
        ],
        "summary": "Get schedule list with shift parent",
        "description": "",
        "operationId": "scheduleWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/schedule/has/boatstatusschedule": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Get schedule list with boatstatusschedule children",
        "description": "",
        "operationId": "scheduleHasManyboatstatusscheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/boatstatusschedule": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Find boatstatusschedule list by parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "getboatstatusscheduleByscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "schedule not found"
          }
        }
      },
      "post": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Insert boatstatusschedule under a parent schedule",
        "description": "Returns a single schedule",
        "operationId": "insertboatstatusscheduleByscheduleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/boatstatusschedule/{boatstatusscheduleId}": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Get by boatstatusschedule id parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "getboatstatusscheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Delete by boatstatusschedule id parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "deleteboatstatusscheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of cboatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Update boatstatusschedule under a parent schedule",
        "description": "Returns a single schedule",
        "operationId": "updateboatstatusscheduleByIdAndscheduleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "boatstatusschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/boatstatusschedule/{boatstatusscheduleId}/exists": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Check row exists by boatstatusschedule id and parent schedule id",
        "description": "",
        "operationId": "existsboatstatusscheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "boatstatusscheduleId",
            "in": "path",
            "description": "ID of boatstatusschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/boatstatusschedule/findOne": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Find one boatstatusschedule by parent schedule id and filters",
        "description": "",
        "operationId": "findOneboatstatusscheduleByscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/boatstatusschedule/count": {
      "get": {
        "tags": [
          "scheduleHasManyboatstatusschedule"
        ],
        "summary": "Get boatstatusschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/has/employeeschedule": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Get schedule list with employeeschedule children",
        "description": "",
        "operationId": "scheduleHasManyemployeescheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/employeeschedule": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Find employeeschedule list by parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "getemployeescheduleByscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "schedule not found"
          }
        }
      },
      "post": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Insert employeeschedule under a parent schedule",
        "description": "Returns a single schedule",
        "operationId": "insertemployeescheduleByscheduleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/employeeschedule/{employeescheduleId}": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Get by employeeschedule id parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "getemployeescheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Delete by employeeschedule id parent schedule id",
        "description": "Returns a single schedule",
        "operationId": "deleteemployeescheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of cemployeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Update employeeschedule under a parent schedule",
        "description": "Returns a single schedule",
        "operationId": "updateemployeescheduleByIdAndscheduleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employeeschedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/employeeschedule/{employeescheduleId}/exists": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Check row exists by employeeschedule id and parent schedule id",
        "description": "",
        "operationId": "existsemployeescheduleByIdAndscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeescheduleId",
            "in": "path",
            "description": "ID of employeeschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/employeeschedule/findOne": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Find one employeeschedule by parent schedule id and filters",
        "description": "",
        "operationId": "findOneemployeescheduleByscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/employeeschedule/count": {
      "get": {
        "tags": [
          "scheduleHasManyemployeeschedule"
        ],
        "summary": "Get employeeschedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinscheduleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of parent schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/schedule": {
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "Add a new schedule",
        "description": "",
        "operationId": "addschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Find schedule by ID",
        "description": "Returns a single schedule",
        "operationId": "getscheduleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "schedule not found"
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "summary": "Updates a schedule",
        "description": "",
        "operationId": "updateschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "schedule object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "Deletes a schedule",
        "description": "",
        "operationId": "deleteschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "schedule not found"
          }
        }
      }
    },
    "/api/v1/schedule/bulk": {
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "Bulk schedule insert",
        "description": "",
        "operationId": "bulkscheduleInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "summary": "Updates a schedule",
        "description": "",
        "operationId": "updateschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "Deletes a schedule",
        "description": "",
        "operationId": "deleteschedule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "schedule not found"
          }
        }
      }
    },
    "/api/v1/schedule/findOne": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneschedule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/{scheduleId}/exists": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Check schedule with provided ID exists",
        "description": "Returns a single schedule",
        "operationId": "checkscheduleExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/schedule/count": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Get schedule count",
        "operationId": "getscheduleCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/groupby/{columnName}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "scheduleGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/distribution/{columnName}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "",
        "description": "",
        "operationId": "scheduleDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/distinct/{columnName}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "scheduleDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/schedule/aggregate/{columnName}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "scheduleAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/has/schedule": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Get shift list with schedule children",
        "description": "",
        "operationId": "shiftHasManyscheduleList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/schedule": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Find schedule list by parent shift id",
        "description": "Returns a single shift",
        "operationId": "getscheduleByshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "shift not found"
          }
        }
      },
      "post": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Insert schedule under a parent shift",
        "description": "Returns a single shift",
        "operationId": "insertscheduleByshiftId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/schedule/{scheduleId}": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Get by schedule id parent shift id",
        "description": "Returns a single shift",
        "operationId": "getscheduleByIdAndshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of parent shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Delete by schedule id parent shift id",
        "description": "Returns a single shift",
        "operationId": "deletescheduleByIdAndshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of parent shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of cschedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Update schedule under a parent shift",
        "description": "Returns a single shift",
        "operationId": "updatescheduleByIdAndshiftId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "schedule object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/schedule/{scheduleId}/exists": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Check row exists by schedule id and parent shift id",
        "description": "",
        "operationId": "existsscheduleByIdAndshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of parent shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "ID of schedule",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/schedule/findOne": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Find one schedule by parent shift id and filters",
        "description": "",
        "operationId": "findOnescheduleByshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of parent shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/schedule/count": {
      "get": {
        "tags": [
          "shiftHasManyschedule"
        ],
        "summary": "Get schedule count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinshiftId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of parent shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/shift": {
      "post": {
        "tags": [
          "shift"
        ],
        "summary": "Add a new shift",
        "description": "",
        "operationId": "addshift",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "shift object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shift"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getshift",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Find shift by ID",
        "description": "Returns a single shift",
        "operationId": "getshiftById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/shift"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "shift not found"
          }
        }
      },
      "put": {
        "tags": [
          "shift"
        ],
        "summary": "Updates a shift",
        "description": "",
        "operationId": "updateshift",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "shift object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shift"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "shift"
        ],
        "summary": "Deletes a shift",
        "description": "",
        "operationId": "deleteshift",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "shift not found"
          }
        }
      }
    },
    "/api/v1/shift/bulk": {
      "post": {
        "tags": [
          "shift"
        ],
        "summary": "Bulk shift insert",
        "description": "",
        "operationId": "bulkshiftInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "shift objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shift"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "shift"
        ],
        "summary": "Updates a shift",
        "description": "",
        "operationId": "updateshift",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "shift objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shift"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "shift"
        ],
        "summary": "Deletes a shift",
        "description": "",
        "operationId": "deleteshift",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "shift objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shift"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "shift not found"
          }
        }
      }
    },
    "/api/v1/shift/findOne": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneshift",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/shift"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/{shiftId}/exists": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Check shift with provided ID exists",
        "description": "Returns a single shift",
        "operationId": "checkshiftExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "description": "ID of shift",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/shift/count": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Get shift count",
        "operationId": "getshiftCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/groupby/{columnName}": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "shiftGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/shift"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/distribution/{columnName}": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "",
        "description": "",
        "operationId": "shiftDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/distinct/{columnName}": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "shiftDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/shift/aggregate/{columnName}": {
      "get": {
        "tags": [
          "shift"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "shiftAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/shift"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/belongs/employee": {
      "get": {
        "tags": [
          "useraccountBelongsToemployee"
        ],
        "summary": "Get useraccount list with employee parent",
        "description": "",
        "operationId": "useraccountWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/useraccount": {
      "post": {
        "tags": [
          "useraccount"
        ],
        "summary": "Add a new useraccount",
        "description": "",
        "operationId": "adduseraccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getuseraccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/{useraccountId}": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Find useraccount by ID",
        "description": "Returns a single useraccount",
        "operationId": "getuseraccountById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useraccount not found"
          }
        }
      },
      "put": {
        "tags": [
          "useraccount"
        ],
        "summary": "Updates a useraccount",
        "description": "",
        "operationId": "updateuseraccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "useraccount object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "useraccount"
        ],
        "summary": "Deletes a useraccount",
        "description": "",
        "operationId": "deleteuseraccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useraccount not found"
          }
        }
      }
    },
    "/api/v1/useraccount/bulk": {
      "post": {
        "tags": [
          "useraccount"
        ],
        "summary": "Bulk useraccount insert",
        "description": "",
        "operationId": "bulkuseraccountInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useraccount"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "useraccount"
        ],
        "summary": "Updates a useraccount",
        "description": "",
        "operationId": "updateuseraccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useraccount"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "useraccount"
        ],
        "summary": "Deletes a useraccount",
        "description": "",
        "operationId": "deleteuseraccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useraccount objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useraccount"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useraccount not found"
          }
        }
      }
    },
    "/api/v1/useraccount/findOne": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneuseraccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/{useraccountId}/exists": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Check useraccount with provided ID exists",
        "description": "Returns a single useraccount",
        "operationId": "checkuseraccountExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useraccountId",
            "in": "path",
            "description": "ID of useraccount",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/useraccount/count": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Get useraccount count",
        "operationId": "getuseraccountCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/groupby/{columnName}": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "useraccountGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/distribution/{columnName}": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "",
        "description": "",
        "operationId": "useraccountDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/distinct/{columnName}": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "useraccountDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useraccount/aggregate/{columnName}": {
      "get": {
        "tags": [
          "useraccount"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "useraccountAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useraccount"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/belongs/employee": {
      "get": {
        "tags": [
          "vacationBelongsToemployee"
        ],
        "summary": "Get vacation list with employee parent",
        "description": "",
        "operationId": "vacationWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/vacation/belongs/vacationstatus": {
      "get": {
        "tags": [
          "vacationBelongsTovacationstatus"
        ],
        "summary": "Get vacation list with vacationstatus parent",
        "description": "",
        "operationId": "vacationWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/vacation/belongs/vacationtype": {
      "get": {
        "tags": [
          "vacationBelongsTovacationtype"
        ],
        "summary": "Get vacation list with vacationtype parent",
        "description": "",
        "operationId": "vacationWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/vacation": {
      "post": {
        "tags": [
          "vacation"
        ],
        "summary": "Add a new vacation",
        "description": "",
        "operationId": "addvacation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getvacation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/{vacationId}": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Find vacation by ID",
        "description": "Returns a single vacation",
        "operationId": "getvacationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacation not found"
          }
        }
      },
      "put": {
        "tags": [
          "vacation"
        ],
        "summary": "Updates a vacation",
        "description": "",
        "operationId": "updatevacation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "vacation object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacation"
        ],
        "summary": "Deletes a vacation",
        "description": "",
        "operationId": "deletevacation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacation not found"
          }
        }
      }
    },
    "/api/v1/vacation/bulk": {
      "post": {
        "tags": [
          "vacation"
        ],
        "summary": "Bulk vacation insert",
        "description": "",
        "operationId": "bulkvacationInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacation"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "vacation"
        ],
        "summary": "Updates a vacation",
        "description": "",
        "operationId": "updatevacation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacation"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacation"
        ],
        "summary": "Deletes a vacation",
        "description": "",
        "operationId": "deletevacation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacation"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacation not found"
          }
        }
      }
    },
    "/api/v1/vacation/findOne": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnevacation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/{vacationId}/exists": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Check vacation with provided ID exists",
        "description": "Returns a single vacation",
        "operationId": "checkvacationExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vacation/count": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Get vacation count",
        "operationId": "getvacationCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/groupby/{columnName}": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "vacationGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/distribution/{columnName}": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "",
        "description": "",
        "operationId": "vacationDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/distinct/{columnName}": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacation/aggregate/{columnName}": {
      "get": {
        "tags": [
          "vacation"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacation"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/has/vacation": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Get vacationstatus list with vacation children",
        "description": "",
        "operationId": "vacationstatusHasManyvacationList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/vacation": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Find vacation list by parent vacationstatus id",
        "description": "Returns a single vacationstatus",
        "operationId": "getvacationByvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationstatus not found"
          }
        }
      },
      "post": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Insert vacation under a parent vacationstatus",
        "description": "Returns a single vacationstatus",
        "operationId": "insertvacationByvacationstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/vacation/{vacationId}": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Get by vacation id parent vacationstatus id",
        "description": "Returns a single vacationstatus",
        "operationId": "getvacationByIdAndvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of parent vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Delete by vacation id parent vacationstatus id",
        "description": "Returns a single vacationstatus",
        "operationId": "deletevacationByIdAndvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of parent vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of cvacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Update vacation under a parent vacationstatus",
        "description": "Returns a single vacationstatus",
        "operationId": "updatevacationByIdAndvacationstatusId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/vacation/{vacationId}/exists": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Check row exists by vacation id and parent vacationstatus id",
        "description": "",
        "operationId": "existsvacationByIdAndvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of parent vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/vacation/findOne": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Find one vacation by parent vacationstatus id and filters",
        "description": "",
        "operationId": "findOnevacationByvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of parent vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/vacation/count": {
      "get": {
        "tags": [
          "vacationstatusHasManyvacation"
        ],
        "summary": "Get vacation count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinvacationstatusId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of parent vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus": {
      "post": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Add a new vacationstatus",
        "description": "",
        "operationId": "addvacationstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationstatus object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getvacationstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Find vacationstatus by ID",
        "description": "Returns a single vacationstatus",
        "operationId": "getvacationstatusById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationstatus not found"
          }
        }
      },
      "put": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Updates a vacationstatus",
        "description": "",
        "operationId": "updatevacationstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "vacationstatus object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Deletes a vacationstatus",
        "description": "",
        "operationId": "deletevacationstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationstatus not found"
          }
        }
      }
    },
    "/api/v1/vacationstatus/bulk": {
      "post": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Bulk vacationstatus insert",
        "description": "",
        "operationId": "bulkvacationstatusInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationstatus objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Updates a vacationstatus",
        "description": "",
        "operationId": "updatevacationstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationstatus objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationstatus"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Deletes a vacationstatus",
        "description": "",
        "operationId": "deletevacationstatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationstatus objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationstatus"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationstatus not found"
          }
        }
      }
    },
    "/api/v1/vacationstatus/findOne": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnevacationstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/{vacationstatusId}/exists": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Check vacationstatus with provided ID exists",
        "description": "Returns a single vacationstatus",
        "operationId": "checkvacationstatusExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationstatusId",
            "in": "path",
            "description": "ID of vacationstatus",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vacationstatus/count": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Get vacationstatus count",
        "operationId": "getvacationstatusCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/groupby/{columnName}": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "vacationstatusGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/distribution/{columnName}": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "",
        "description": "",
        "operationId": "vacationstatusDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/distinct/{columnName}": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationstatusDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationstatus/aggregate/{columnName}": {
      "get": {
        "tags": [
          "vacationstatus"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationstatusAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationstatus"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/has/vacation": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Get vacationtype list with vacation children",
        "description": "",
        "operationId": "vacationtypeHasManyvacationList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/vacation": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Find vacation list by parent vacationtype id",
        "description": "Returns a single vacationtype",
        "operationId": "getvacationByvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationtype not found"
          }
        }
      },
      "post": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Insert vacation under a parent vacationtype",
        "description": "Returns a single vacationtype",
        "operationId": "insertvacationByvacationtypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/vacation/{vacationId}": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Get by vacation id parent vacationtype id",
        "description": "Returns a single vacationtype",
        "operationId": "getvacationByIdAndvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of parent vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Delete by vacation id parent vacationtype id",
        "description": "Returns a single vacationtype",
        "operationId": "deletevacationByIdAndvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of parent vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of cvacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Update vacation under a parent vacationtype",
        "description": "Returns a single vacationtype",
        "operationId": "updatevacationByIdAndvacationtypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacation object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/vacation/{vacationId}/exists": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Check row exists by vacation id and parent vacationtype id",
        "description": "",
        "operationId": "existsvacationByIdAndvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of parent vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "vacationId",
            "in": "path",
            "description": "ID of vacation",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/vacation/findOne": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Find one vacation by parent vacationtype id and filters",
        "description": "",
        "operationId": "findOnevacationByvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of parent vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/vacation/count": {
      "get": {
        "tags": [
          "vacationtypeHasManyvacation"
        ],
        "summary": "Get vacation count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinvacationtypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of parent vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype": {
      "post": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Add a new vacationtype",
        "description": "",
        "operationId": "addvacationtype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationtype object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getvacationtype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Find vacationtype by ID",
        "description": "Returns a single vacationtype",
        "operationId": "getvacationtypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationtype not found"
          }
        }
      },
      "put": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Updates a vacationtype",
        "description": "",
        "operationId": "updatevacationtype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "vacationtype object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Deletes a vacationtype",
        "description": "",
        "operationId": "deletevacationtype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationtype not found"
          }
        }
      }
    },
    "/api/v1/vacationtype/bulk": {
      "post": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Bulk vacationtype insert",
        "description": "",
        "operationId": "bulkvacationtypeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationtype objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationtype"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Updates a vacationtype",
        "description": "",
        "operationId": "updatevacationtype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationtype objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationtype"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Deletes a vacationtype",
        "description": "",
        "operationId": "deletevacationtype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vacationtype objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vacationtype"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vacationtype not found"
          }
        }
      }
    },
    "/api/v1/vacationtype/findOne": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnevacationtype",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/{vacationtypeId}/exists": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Check vacationtype with provided ID exists",
        "description": "Returns a single vacationtype",
        "operationId": "checkvacationtypeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vacationtypeId",
            "in": "path",
            "description": "ID of vacationtype",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vacationtype/count": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Get vacationtype count",
        "operationId": "getvacationtypeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/groupby/{columnName}": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "vacationtypeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/distribution/{columnName}": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "",
        "description": "",
        "operationId": "vacationtypeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/distinct/{columnName}": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationtypeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vacationtype/aggregate/{columnName}": {
      "get": {
        "tags": [
          "vacationtype"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vacationtypeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vacationtype"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "boat": {
      "type": "object",
      "properties": {
        "boatId": {
          "type": "integer",
          "nullable": false
        },
        "name": {
          "type": "string"
        },
        "motor": {
          "type": "string"
        },
        "capacity": {
          "type": "integer"
        },
        "seating": {
          "type": "string"
        },
        "sound": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "covering": {
          "type": "string"
        },
        "other": {
          "type": "string"
        }
      }
    },
    "boatrental": {
      "type": "object",
      "properties": {
        "boatRentalId": {
          "type": "integer",
          "nullable": false
        },
        "boatRentalStatusId": {
          "type": "integer",
          "nullable": false
        },
        "boatId": {
          "type": "integer",
          "nullable": false
        },
        "employeeId": {
          "type": "integer",
          "nullable": false
        },
        "customerId": {
          "type": "integer",
          "nullable": false
        },
        "bookingDate": {
          "type": "string"
        },
        "bookingTime": {
          "type": "string"
        },
        "passengers": {
          "type": "integer"
        },
        "requestedCoolers": {
          "type": "integer"
        },
        "specialNotes": {
          "type": "string"
        }
      }
    },
    "boatrentalstatus": {
      "type": "object",
      "properties": {
        "boatRentalStatusId": {
          "type": "integer",
          "nullable": false
        },
        "boatRentalStatus": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "boatstatus": {
      "type": "object",
      "properties": {
        "boatStatusId": {
          "type": "integer",
          "nullable": false
        },
        "boatStatus": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "boatstatusschedule": {
      "type": "object",
      "properties": {
        "boatStatusScheduleId": {
          "type": "integer",
          "nullable": false
        },
        "scheduleId": {
          "type": "integer",
          "nullable": false
        },
        "boatId": {
          "type": "integer",
          "nullable": false
        },
        "boatStatusId": {
          "type": "integer",
          "nullable": false
        },
        "description": {
          "type": "string"
        }
      }
    },
    "customer": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "integer",
          "nullable": false
        },
        "firstName": {
          "type": "string",
          "nullable": false
        },
        "lastName": {
          "type": "string",
          "nullable": false
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "customers": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "age": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "nullable": false
        },
        "updatedAt": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "employee": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "integer",
          "nullable": false
        },
        "firstName": {
          "type": "string",
          "nullable": false
        },
        "lastName": {
          "type": "string",
          "nullable": false
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "employeeTypeId": {
          "type": "integer",
          "nullable": false
        },
        "employeeStatusId": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "employeeschedule": {
      "type": "object",
      "properties": {
        "employeescheduleId": {
          "type": "integer",
          "nullable": false
        },
        "employeeId": {
          "type": "integer",
          "nullable": false
        },
        "scheduleId": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "employeestatus": {
      "type": "object",
      "properties": {
        "employeeStatusId": {
          "type": "integer",
          "nullable": false
        },
        "employeeStatus": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "employeetype": {
      "type": "object",
      "properties": {
        "employeeTypeId": {
          "type": "integer",
          "nullable": false
        },
        "employeeType": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "schedule": {
      "type": "object",
      "properties": {
        "scheduleId": {
          "type": "integer",
          "nullable": false
        },
        "scheduleDate": {
          "type": "string",
          "nullable": false
        },
        "shiftId": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "shift": {
      "type": "object",
      "properties": {
        "shiftId": {
          "type": "integer",
          "nullable": false
        },
        "shift": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "useraccount": {
      "type": "object",
      "properties": {
        "userAccountId": {
          "type": "integer",
          "nullable": false
        },
        "employeeId": {
          "type": "integer",
          "nullable": false
        },
        "username": {
          "type": "string",
          "nullable": false
        },
        "password": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "vacation": {
      "type": "object",
      "properties": {
        "vacationId": {
          "type": "integer",
          "nullable": false
        },
        "employeeId": {
          "type": "integer",
          "nullable": false
        },
        "vacationTypeId": {
          "type": "integer",
          "nullable": false
        },
        "vacationStatusId": {
          "type": "integer",
          "nullable": false
        },
        "vacationStartDate": {
          "type": "string"
        },
        "vacationEndDate": {
          "type": "string"
        }
      }
    },
    "vacationstatus": {
      "type": "object",
      "properties": {
        "vacationStatusId": {
          "type": "integer",
          "nullable": false
        },
        "vacationStatus": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "vacationtype": {
      "type": "object",
      "properties": {
        "vacationTypeId": {
          "type": "integer",
          "nullable": false
        },
        "vacationType": {
          "type": "string",
          "nullable": false
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}